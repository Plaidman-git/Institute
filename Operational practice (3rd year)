import pandas as pd
import warnings
import numpy as np
from collections import OrderedDict
import sys
import datetime

file_name = sys.argv[1]
warnings.filterwarnings("ignore")
excel = pd.ExcelFile(file_name)
sheet_names = excel.sheet_names
result = []

def filter_list(lst):
    filtered_list = [item for item in lst if "from" not in item and "to" not in item]
    if len(filtered_list) == 1:
        return filtered_list[0]
    else:
        return filtered_list if filtered_list != [] else ''

def process_ranges(row_indexes, df):
    ranges = {}
    remaining_indexes = row_indexes.copy()  # Копируем список, чтобы не изменять исходный
    upper_bound = df.index.min()
    lower_bound = df.index.max()
    if len(remaining_indexes) == 1:
        ranges[remaining_indexes[0]] = upper_bound, lower_bound
    else:
        for i, row in enumerate(remaining_indexes):
            if i == 0:  # Если первый элемент
                upper = upper_bound
                lower = remaining_indexes[i + 1] - 1
            elif i == len(remaining_indexes) - 1:  # Если последний элемент
                upper = remaining_indexes[i]
                lower = lower_bound
            else:
                upper = remaining_indexes[i]
                lower = remaining_indexes[i + 1] - 1
            ranges[remaining_indexes[i]] = (upper, lower)
    return ranges
def clean_dict(d):
    cleaned_dict = d.copy()
    for key, value in d.items():
        if type(value) == list:
            cleaned_dict[key] = ';'.join(value)
        if value is None or value == []:
            cleaned_dict[key] = ''
    return cleaned_dict
for sheet_index in range(len(sheet_names)):
    table_name = sheet_names[sheet_index]
    df = excel.parse(table_name)
    df.columns = df.loc[9]  # Сделать названия колонок, как в 9 строчке ('1', '2', ...)
    df = df[10:]
    df.fillna('', inplace=True)  # Заменить NaN на пустые значения
    df.columns = df.columns.map(str)
    df = df.applymap(lambda x: x.strip() if isinstance(x, str) else x)
    df.columns = [str(i) for i in range(1, df.columns.__len__() + 1)]
    current_rows = len(df)
    rows_to_add = 4 - (current_rows % 4)
    df_to_append = pd.DataFrame(np.empty((rows_to_add, len(df.columns)), dtype=object), columns=df.columns)
    df_to_append[:] = ''
    df = pd.concat([df, df_to_append], ignore_index=True)

    # Форматирование из "dry" в Dry
    df['5'] = df['5'].str.replace('\"dry\"', 'Dry')
    df['6'] = df['6'].str.replace('\"dry\"', 'Dry')

    # Перемещение столбцов 1 0
    indices = df[df['14'].isin([1, 0])].index
    df.loc[indices, '15'] = df.loc[indices, '14']
    df.loc[indices, '14'] = ''
    # Перемещение приоритетов
    matches = df['13'].str.match(r'[A-Z]$').fillna(False)
    indices = df[matches].index
    df.loc[indices, '14'] = df.loc[indices, '13']
    df.loc[indices, '13'] = ''
    # Перемещение типа протоколов
    matches = df['12'].str.match('[A-Z]{1}[A-Z]*P$').fillna(False)
    indices = df[matches].index
    df.loc[indices, '13'] = df.loc[indices, '12']
    df.loc[indices, '12'] = ''
    for group_index in range(len(df.iloc[::4])):
        group = df.iloc[4 * group_index:4 * (group_index + 1)]
        pattern_inp_out = r"([A-Z]{2,3}\s?\d{4}[A-Z]?)"
        pattern_contour = r'^[a-zA-Z]+$'
        mask = group['1'].str.match(pattern_contour).fillna(False)  # Маска для поиска контура
        type_df = group[mask]
        if not type_df.empty:  # Если есть название контура
            type_row = type_df.index[0]
            type_value = group.loc[type_row, '1']
        else:  # Если нет названия контура
            type_row = ''
            type_value = ''
        mask = group['1'] != ''  # Маска для поиска строк, где есть значения
        lower_rows = group[mask]
        if (lower_rows['1'] == type_value).any():  # Если содержит тип
            lower_rows = lower_rows.drop(lower_rows[lower_rows['1'] == type_value].index)
            remaining_indexes = lower_rows.index
        else:  # Если не содержит тип
            remaining_indexes = lower_rows.index
        cols = dict.fromkeys(
            ['Лист', 'Индекс контура', 'Тип', 'Клапан 1', 'Клапан 2', 'Клапан 3', 'Месторасположение',
             'Мнемосхема 1', 'Мнемосхема 2', 'input Клапан 1', 'input_signal Клапан 1', 'output Клапан 1',
             'output_signal Клапан 1', 'input Клапан 2', 'input_signal Клапан 2', 'output Клапан 2',
             'output_signal Клапан 2'
             ])
        keys = []
        for i in range(3):
            keys.append(f'input Клапан {i + 1}')
            keys.append(f'input_signal Клапан {i + 1}')
            keys.append(f'output Клапан {i + 1}')
            keys.append(f'output_signal Клапан {i + 1}')
        keys = keys + [
            'Период записи', 'Единицы измерения', 'Шкала', 'Тип регулировки/действие регулировки Клапан 1',
            'Тип регулировки/действие регулировки Клапан 2', 'Тип регулировки/действие регулировки Клапан 3',
            'Сигнализация Клапан 1', 'Сигнализация Клапан 2', 'Сигнализация Клапан 3',
            'HH_perc_real', 'HH_protocol', 'HH_priority', 'H_perc_real', 'H_protocol', 'H_priority', 'L_perc_real',
            'L_protocol', 'L_priority', 'LL_perc_real', 'LL_protocol', 'LL_priority', '1/0',
            'Короткий и длинный комментарий', 'Дополнительный комментарий', 'Схемы контура', 'Схемы логические', 'Изм'
        ]
        for key in keys:
            cols[key] = None
        # Для каждого элемента определяется верхняя и нижняя граница поиска
        ranges = process_ranges(remaining_indexes, group)
        for i in range(len(remaining_indexes)):
            v = group.loc[ranges[remaining_indexes[i]][0]:ranges[remaining_indexes[i]][1]]
            matches_5 = v['5'].str.findall(pattern_inp_out)
            matches_6 = v['6'].str.findall(pattern_inp_out)
            matches_from = [item for sublist in matches_5.dropna().values.tolist() for item in sublist]
            matches_to = [item for sublist in matches_6.dropna().values.tolist() for item in sublist]
            mask_input = ~v['5'].str.contains(pattern_inp_out, na=False)
            mask_output = ~v['6'].str.contains(pattern_inp_out, na=False)
            cols[f'input Клапан {i + 1}'] = matches_from if matches_from else ''
            cols[f'output Клапан {i + 1}'] = matches_to if matches_to else ''
            cols[f'input_signal Клапан {i + 1}'] = filter_list(list(filter(bool, v.loc[mask_input, '5'].tolist())))
            cols[f'output_signal Клапан {i + 1}'] = filter_list(list(filter(bool, v.loc[mask_output, '6'].tolist())))
            cols[f'Тип регулировки/действие регулировки Клапан {i + 1}'] = v.loc[remaining_indexes[i], '10']
            cols[f'Сигнализация Клапан {i + 1}'] = v.loc[remaining_indexes[i], '11']

            if i == 0:
                cols['Лист'] = str(sheet_names[sheet_index])
                cols['Индекс контура'] = group_index
                cols['Тип'] = type_value
                valves = group.loc[:, '1']
                valves = valves.drop(valves[(valves == type_value)].index).tolist()
                valves = [x for x in valves if x != '']
                cols['Клапан 1'] = valves[0] if len(valves) >= 1 else ''
                cols['Клапан 2'] = valves[1] if len(valves) >= 2 else ''
                cols['Клапан 3'] = valves[2] if len(valves) >= 3 else ''
                filtered_test = group[group['3'] != '']
                cols['Месторасположение'] = group.loc[group['2'] != '', '2'].values[0]
                cols['Мнемосхема 1'] = filtered_test.iloc[0, 2] if len(filtered_test) > 0 else ''
                cols['Мнемосхема 2'] = filtered_test.iloc[1, 2] if len(filtered_test) > 1 else ''
                cols['Период записи'] = group.iloc[1, 6]
                cols['Период записи'] = group.iloc[1, 6]
                cols['Единицы измерения'] = group.iloc[1, 7]
                cols['Шкала'] = group.iloc[1, 8]
                cols['Схемы контура'] = next((x for x in group.loc[:, '18'] if x != ''), None)
                cols['Изм'] = group.iloc[1, 19]
                for index, value in enumerate(["HH", "H", "L", "LL"]):
                    cols[f"{value}_perc_real"] = group.iloc[index, 11]
                    cols[f"{value}_protocol"] = group.iloc[index, 12]
                    cols[f"{value}_priority"] = group.iloc[index, 13]

                add_comment = group.loc[:, '17'].tolist()
                add_comment = [x for x in add_comment if x != '']
                describe = group.loc[:, '16'].tolist()
                describe = [x for x in describe if x != '']
                describe = list(OrderedDict.fromkeys(describe))
                if len(add_comment) > 0:  # Есть дополнительный комментарий
                    cols['Короткий и длинный комментарий'] = describe
                else:
                    cols['Короткий и длинный комментарий'] = ';'.join(describe)

                if len(add_comment) > 0:
                    cols['Дополнительный комментарий'] = ';'.join(add_comment)
                one_zero = f"{group.iloc[1, 14]};{group.iloc[2, 14]}"
                if all(value == "" for value in one_zero.split(";")):
                    one_zero = ""
                cols['1/0'] = one_zero
                cols['Схемы логические'] = next((x for x in group.loc[:, '19'] if x != ''), None)
        result.append(cols)
cleaned_list = []
for dictionary in result:
    cleaned_dict = clean_dict(dictionary)
    cleaned_list.append(cleaned_dict)
one_row = pd.DataFrame(cleaned_list)
one_row = one_row.rename(columns=lambda x: x.replace('Клапан 1', 'Контур') if 'Клапан 1' in x else x)
one_row = one_row.drop(one_row[(one_row == '').all(axis=1)].index)
current_datetime = datetime.datetime.now()
formatted_datetime = current_datetime.strftime("%Y-%m-%d_%H-%M-%S")
output_file_name = f"output_{formatted_datetime}.xlsx"
one_row.to_excel(output_file_name, index=False, freeze_panes=(1, 0))
print(f"Файл успешно обработан. Результат в файле {output_file_name}")
df = pd.read_excel(output_file_name)
#проверка на наличие значения
def isnan(value):
    return value != value
#2 значения в 1 ячейку
def input_check(value1, value2):
    if isnan(value1):
        return value2
    if isnan(value2):
        return value1
    return ';'.join([value1, value2])
#форматирование 1 строки в 4
def make_dict(row):
    data = {}
    data["Лист"] = [None, row["Лист"], None, None]
    data["Индекс контура"] = [
        None,
        row["Тип"],
        row["Контур"],
        row["Клапан 2"]
    ] if isnan(row["Клапан 3"]) else [
        row["Тип"],
        row["Контур"],
        row["Клапан 2"],
        row["Клапан 3"]
    ]
    data["Месторасположение"] = [None, row["Месторасположение"], None, None]
    data["Мнемосхема"] = [None, row["Мнемосхема 1"], row["Мнемосхема 2"], None]
    data["Входной сигнал"] = [
        None, 
        None, 
        input_check(row["input Контур"], row["input_signal Контур"]), 
        input_check(row["input Клапан 2"], row["input_signal Клапан 2"])
    ] if isnan(row["Клапан 3"]) else [
        None, 
        input_check(row["input Контур"], row["input_signal Контур"]), 
        input_check(row["input Клапан 2"], row["input_signal Клапан 2"]),
        input_check(row["input Клапан 3"], row["input_signal Клапан 3"])
    ]
    data["Выходной сигнал"] = [
        None, 
        None, 
        input_check(row["output Контур"], row["output_signal Контур"]), 
        input_check(row["output Клапан 2"], row["output_signal Клапан 2"])
    ] if isnan(row["Клапан 3"]) else [
        None, 
        input_check(row["output Контур"], row["output_signal Контур"]), 
        input_check(row["output Клапан 2"], row["output_signal Клапан 2"]),
        input_check(row["output Клапан 3"], row["output_signal Клапан 3"])
    ]
    data["Период записи"] = [None, row["Период записи"], None, None]
    data["Единицы измерения"] = [None, row["Единицы измерения"], None, None]
    data["Шкала"] = [None, row["Шкала"], None, None]
    data["Тип регулировки/действие регулировки"] = [
        None, 
        row["Тип регулировки/действие регулировки Контур"], 
        row["Тип регулировки/действие регулировки Клапан 2"], 
        row["Тип регулировки/действие регулировки Клапан 3"]
    ]
    data["Сигнализация"] = ["HH", "H", "L", "LL"]
    data["% и рельн."] = [row["HH_perc_real"], row["H_perc_real"], row["L_perc_real"], row["LL_perc_real"]]
    data["Тип протокола"] = [row["HH_protocol"], row["H_protocol"], row["L_protocol"], row["LL_protocol"]]
    data["Приоритет"] = [row["HH_priority"], row["H_priority"], row["L_priority"], row["LL_priority"]]
    one_slash_zero = row["1/0"].split(";") if not isnan(row["1/0"]) else [None, None]
    data["1/0"] = [None, one_slash_zero[0], one_slash_zero[1], None]
    comment = row["Короткий и длинный комментарий"].split(";") if not isnan(row["Короткий и длинный комментарий"]) else [None, None, None]
    data["Короткий и длинный комментарий"] = [
        None, 
        comment[0], 
        comment[1] if len(comment) > 1 else None, 
        comment[2] if len(comment) > 2 else None
    ]
    extra_comment = row["Дополнительный комментарий"].split(";") if not isnan(row["Дополнительный комментарий"]) else [None, None]
    data["Дополнительный комментарий"] = [
        None, 
        extra_comment[0], 
        extra_comment[1] if len(extra_comment) > 1 else None, 
        None
    ]
    data["Схемы контура"] = [None, row["Схемы контура"], None, None]
    data["Схемы логические"] = [None, row["Схемы логические"], None, None]
    data["Изм"] = [None, row["Изм"], None, None]
    return data
df_dict = pd.DataFrame()
#объединение строк
for i in range(len(df)):
   row = df.loc[i]
   dict_list = make_dict(row)
   df_dict = pd.concat([df_dict, pd.DataFrame(dict_list)], ignore_index=True)
current_datetime = datetime.datetime.now()
formatted_datetime = current_datetime.strftime("%Y-%m-%d_%H-%M-%S")
output_file_name = f"reverse_{formatted_datetime}.xlsx"
df_dict.to_excel(output_file_name, index=False)
print(f"Файл успешно обработан. Результат в файле {output_file_name}")
